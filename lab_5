

```go
package main

import (
    "color"
    "fmt"
    "image"
    "image/draw"
    "image/png"
    "log"
    "os"
    "sync"
    "time"
)

func count(ch chan int) {
    for num := range ch {
        fmt.Println(num * num) // Возведение в квадрат
    }
}

func filter(img draw.RGBA64Image) {
    bounds := img.Bounds()
    for y := bounds.Min.Y; y < bounds.Max.Y; y++ {
        for x := bounds.Min.X; x < bounds.Max.X; x++ {
            c := img.RGBA64At(x, y)
            gray := (c.R + c.G + c.B) / 3
            img.SetRGBA64(x, y, color.RGBA64{R: gray, G: gray, B: gray, A: c.A})
        }
    }
}

func filterParallel(img draw.RGBA64Image, row int, wg *sync.WaitGroup) {
    defer wg.Done()
    bounds := img.Bounds()
    for x := bounds.Min.X; x < bounds.Max.X; x++ {
        c := img.RGBA64At(x, row)
        gray := (c.R + c.G + c.B) / 3
        img.SetRGBA64(x, row, color.RGBA64{R: gray, G: gray, B: gray, A: c.A})
    }
}

func main() {
    // Задание 1
    ch := make(chan int)
    go count(ch)

    for i := 1; i <= 10; i++ {
        ch <- i
    }
    close(ch)

    // Задание 2 и 3
    file, err := os.Open("input.png")
    if err != nil {
        log.Fatalf("failed to open file: %v", err)
    }
    defer file.Close()

    img, err := png.Decode(file)
    if err != nil {
        log.Fatalf("failed to decode image: %v", err)
    }

    drawImg, ok := img.(draw.RGBA64Image)
    if !ok {
        fmt.Println("conversion failed")
        return
    }

    // Время обработки изображения последовательно
    start := time.Now()
    filter(drawImg)
    fmt.Printf("Sequential processing time: %v\n", time.Since(start))

    // Сохранение обработанного изображения
    outFile, err := os.Create("output_sequential.png")
    if err != nil {
        log.Fatalf("failed to create output file: %v", err)
    }
    defer outFile.Close()

    if err := png.Encode(outFile, drawImg); err != nil {
        log.Fatalf("failed to encode image: %v", err)
    }

    // Параллельная обработка
    var wg sync.WaitGroup
    startParallel := time.Now()
    bounds := drawImg.Bounds()

    for y := bounds.Min.Y; y < bounds.Max.Y; y++ {
        wg.Add(1)
        go filterParallel(drawImg, y, &wg)
    }

    wg.Wait()
    fmt.Printf("Parallel processing time: %v\n", time.Since(startParallel))

    // Сохранение обработанного изображения
    outFileParallel, err := os.Create("output_parallel.png")
    if err != nil {
        log.Fatalf("failed to create output file: %v", err)
    }
    defer outFileParallel.Close()

    if err := png.Encode(outFileParallel, drawImg); err != nil {
        log.Fatalf("failed to encode image: %v", err)
    }

    fmt.Println("Image processing completed.")
}
```



